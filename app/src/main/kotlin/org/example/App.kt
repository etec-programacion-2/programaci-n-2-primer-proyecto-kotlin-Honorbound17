/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

fun main() {
    println("Mucho gusto, Kotlin")

    val nombre: String = "Ignacio"
    val apellido = "Esquivel"
    val fecha: String = "22/4/25"

    println("Me llamo $nombre $apellido")
    println("Hoy es: $fecha")

    Datos()
    AreaDeTriangulo()

    val edad = 17
    MayorDeEdad(edad)

    val numero = 7
    NumeroParEImpar(numero)
    println("El número entregado, $numero es: ${NumeroParEImpar(numero)}")

    val numEjemplo = -6
    println("El número $numEjemplo es: ${TipoDeNumero (numEjemplo)}")

    NumerosConLoops()

    NumerosParesConLoops()

    println("El factorial de 5 es: ${Factorial(5)}")
    Saludar("Jazmín")

    println("2 elevado a 3 es: ${Potencia(2, 3)}")
    println("5 elevado a 0 es: ${Potencia(5, 0)}")

    MostrarSaludo()
    DemoAlcance()
    VariableGlobal()

    val numeros = listOf(5, 2, 8, 1, 9, 3)
    BuscarMayorYMenor(numeros)
}

fun Datos() {
    val edad: Int = 16
    val altura: Double = 1.75
    val esEstudiante: Boolean = true
    val fecha: String = "22/4/25"

    println("Edad: $edad")
    println("Altura: $altura")
    println("Es estudiante: $esEstudiante")
    println("Hoy es: $fecha")
}

fun AreaDeTriangulo() {
    val alt: Double = 20.0
    val base: Double = 15.0
    val area: Double = base*alt
    println("El Area del Triangulo es: $area")
}

fun MayorDeEdad(edad: Int){
    if (edad >= 18) {
        println("Es mayor de edad.")
    } else {
        println("Es menor de edad.")
    }
}

fun NumeroParEImpar(numero: Int): String{
    return when {
        numero % 2 == 0 -> "Es Par"
        else -> "Es Impar"
    }
}

fun TipoDeNumero(num:Int): String{
    return when {
        num > 0 -> "Positivo"
        num < 0 -> "Negativo"
        else -> "Cero"
        }
}

fun NumerosConLoops() {
    println("Implementado con for:")
    for (i in 1..10) {
        println(i)
    }

    println("Implementado con while:")
    var x = 1
    while (x <= 10) {
        println(x)
        x++
    }

    println("Implementado con do-while:")
    var y = 1
    do {
        println(y)
        y++
    } while (y <= 10)
}

fun NumerosParesConLoops() {
    println("Números pares del 2 al 20 - Implementado con for:")
    for (i in 2..20 step 2) {
        println(i)
    }

    println("\nNúmeros pares del 2 al 20 - Implementado con while:")
    var x = 2
    while (x <= 20) {
        println(x)
        x += 2
    }

    println("\nNúmeros pares del 2 al 20 - Implementado con do-while:")
    var y = 2
    do {
        println(y)
        y += 2
    } while (y <= 20)
}

fun Factorial(n: Int): Int {
    return if (n <= 1) 1 else n * Factorial(n - 1)
}

fun Saludar(nombre: String, edad: Int = 29) {
    println("Qué tal $nombre, has de tener $edad años")
}

fun Potencia(base: Int, exponente: Int): Int {
    var resultado = 1
    for (i in 1..exponente) {
        resultado *= base
    }
    return resultado
}

fun MostrarSaludo() {
    val saludo = "Hola desde la función"
    println(saludo)
}

fun DemoAlcance() {
    val mensaje = "Estoy en la función principal"

    if (true) {
        val mensaje = "Estoy dentro del bloque if"
        println(mensaje)
    }
    println(mensaje)
}

val nivelGlobal = "Variable Global"
fun VariableGlobal() {
    val nivelLocal = "Variable Local"
    println(nivelGlobal)
    println(nivelLocal)
}

fun BuscarMayorYMenor(lista: List<Int>) {
    if (lista.isEmpty()) {
        println("Esta lista permanece vacía")
        return
    }

    var mayor = lista[0]
    var menor = lista[0]

    for (digito in lista) {
        if (digito > mayor) {
            mayor = digito
        }
        if (digito < menor) {
            menor = digito
        }
    }

    println("El dígito mayor es: $mayor")
    println("El dígito menor es: $menor")
}

